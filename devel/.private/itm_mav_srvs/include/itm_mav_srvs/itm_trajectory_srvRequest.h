// Generated by gencpp from file itm_mav_srvs/itm_trajectory_srvRequest.msg
// DO NOT EDIT!


#ifndef ITM_MAV_SRVS_MESSAGE_ITM_TRAJECTORY_SRVREQUEST_H
#define ITM_MAV_SRVS_MESSAGE_ITM_TRAJECTORY_SRVREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <itm_mav_msgs/itm_trajectory_point.h>

namespace itm_mav_srvs
{
template <class ContainerAllocator>
struct itm_trajectory_srvRequest_
{
  typedef itm_trajectory_srvRequest_<ContainerAllocator> Type;

  itm_trajectory_srvRequest_()
    : index(0)
    , traj()  {
    }
  itm_trajectory_srvRequest_(const ContainerAllocator& _alloc)
    : index(0)
    , traj(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _index_type;
  _index_type index;

   typedef std::vector< ::itm_mav_msgs::itm_trajectory_point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::itm_mav_msgs::itm_trajectory_point_<ContainerAllocator> >::other >  _traj_type;
  _traj_type traj;





  typedef boost::shared_ptr< ::itm_mav_srvs::itm_trajectory_srvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::itm_mav_srvs::itm_trajectory_srvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct itm_trajectory_srvRequest_

typedef ::itm_mav_srvs::itm_trajectory_srvRequest_<std::allocator<void> > itm_trajectory_srvRequest;

typedef boost::shared_ptr< ::itm_mav_srvs::itm_trajectory_srvRequest > itm_trajectory_srvRequestPtr;
typedef boost::shared_ptr< ::itm_mav_srvs::itm_trajectory_srvRequest const> itm_trajectory_srvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::itm_mav_srvs::itm_trajectory_srvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::itm_mav_srvs::itm_trajectory_srvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::itm_mav_srvs::itm_trajectory_srvRequest_<ContainerAllocator1> & lhs, const ::itm_mav_srvs::itm_trajectory_srvRequest_<ContainerAllocator2> & rhs)
{
  return lhs.index == rhs.index &&
    lhs.traj == rhs.traj;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::itm_mav_srvs::itm_trajectory_srvRequest_<ContainerAllocator1> & lhs, const ::itm_mav_srvs::itm_trajectory_srvRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace itm_mav_srvs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::itm_mav_srvs::itm_trajectory_srvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::itm_mav_srvs::itm_trajectory_srvRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::itm_mav_srvs::itm_trajectory_srvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::itm_mav_srvs::itm_trajectory_srvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::itm_mav_srvs::itm_trajectory_srvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::itm_mav_srvs::itm_trajectory_srvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::itm_mav_srvs::itm_trajectory_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "69726911c754491de400bbe2477ac599";
  }

  static const char* value(const ::itm_mav_srvs::itm_trajectory_srvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x69726911c754491dULL;
  static const uint64_t static_value2 = 0xe400bbe2477ac599ULL;
};

template<class ContainerAllocator>
struct DataType< ::itm_mav_srvs::itm_trajectory_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "itm_mav_srvs/itm_trajectory_srvRequest";
  }

  static const char* value(const ::itm_mav_srvs::itm_trajectory_srvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::itm_mav_srvs::itm_trajectory_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 index\n"
"itm_mav_msgs/itm_trajectory_point[] traj\n"
"\n"
"================================================================================\n"
"MSG: itm_mav_msgs/itm_trajectory_point\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 vx\n"
"float64 vy\n"
"float64 vz\n"
"float64 roll\n"
"float64 pitch\n"
"float64 yaw\n"
"float64 roll_des\n"
"float64 pitch_des\n"
"float64 yaw_des\n"
"float64 roll_rate_des\n"
"float64 pitch_rate_des\n"
"float64 yaw_rate_des\n"
"float64 thrust_des\n"
"bool input_given\n"
"float64[4] q\n"
"float64[2] cube_x\n"
"float64[2] cube_y\n"
"float64[2] cube_z\n"
"float64[2] cube_yaw\n"
"bool fixed\n"
"bool time_known\n"
"int8 derivative\n"
"int8 segment_index\n"
"float64 time_stamp\n"
"bool quaternion_given\n"
;
  }

  static const char* value(const ::itm_mav_srvs::itm_trajectory_srvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::itm_mav_srvs::itm_trajectory_srvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.index);
      stream.next(m.traj);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct itm_trajectory_srvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::itm_mav_srvs::itm_trajectory_srvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::itm_mav_srvs::itm_trajectory_srvRequest_<ContainerAllocator>& v)
  {
    s << indent << "index: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.index);
    s << indent << "traj[]" << std::endl;
    for (size_t i = 0; i < v.traj.size(); ++i)
    {
      s << indent << "  traj[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::itm_mav_msgs::itm_trajectory_point_<ContainerAllocator> >::stream(s, indent + "    ", v.traj[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ITM_MAV_SRVS_MESSAGE_ITM_TRAJECTORY_SRVREQUEST_H
