# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from itm_mav_msgs/itm_trajectory_point.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class itm_trajectory_point(genpy.Message):
  _md5sum = "06c29ab4c48d9e597505a69f6a28b27a"
  _type = "itm_mav_msgs/itm_trajectory_point"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 x
float64 y
float64 z
float64 vx
float64 vy
float64 vz
float64 roll
float64 pitch
float64 yaw
float64 roll_des
float64 pitch_des
float64 yaw_des
float64 roll_rate_des
float64 pitch_rate_des
float64 yaw_rate_des
float64 thrust_des
bool input_given
float64[4] q
float64[2] cube_x
float64[2] cube_y
float64[2] cube_z
float64[2] cube_yaw
bool fixed
bool time_known
int8 derivative
int8 segment_index
float64 time_stamp
bool quaternion_given
"""
  __slots__ = ['x','y','z','vx','vy','vz','roll','pitch','yaw','roll_des','pitch_des','yaw_des','roll_rate_des','pitch_rate_des','yaw_rate_des','thrust_des','input_given','q','cube_x','cube_y','cube_z','cube_yaw','fixed','time_known','derivative','segment_index','time_stamp','quaternion_given']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','bool','float64[4]','float64[2]','float64[2]','float64[2]','float64[2]','bool','bool','int8','int8','float64','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x,y,z,vx,vy,vz,roll,pitch,yaw,roll_des,pitch_des,yaw_des,roll_rate_des,pitch_rate_des,yaw_rate_des,thrust_des,input_given,q,cube_x,cube_y,cube_z,cube_yaw,fixed,time_known,derivative,segment_index,time_stamp,quaternion_given

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(itm_trajectory_point, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.z is None:
        self.z = 0.
      if self.vx is None:
        self.vx = 0.
      if self.vy is None:
        self.vy = 0.
      if self.vz is None:
        self.vz = 0.
      if self.roll is None:
        self.roll = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.roll_des is None:
        self.roll_des = 0.
      if self.pitch_des is None:
        self.pitch_des = 0.
      if self.yaw_des is None:
        self.yaw_des = 0.
      if self.roll_rate_des is None:
        self.roll_rate_des = 0.
      if self.pitch_rate_des is None:
        self.pitch_rate_des = 0.
      if self.yaw_rate_des is None:
        self.yaw_rate_des = 0.
      if self.thrust_des is None:
        self.thrust_des = 0.
      if self.input_given is None:
        self.input_given = False
      if self.q is None:
        self.q = [0.] * 4
      if self.cube_x is None:
        self.cube_x = [0.] * 2
      if self.cube_y is None:
        self.cube_y = [0.] * 2
      if self.cube_z is None:
        self.cube_z = [0.] * 2
      if self.cube_yaw is None:
        self.cube_yaw = [0.] * 2
      if self.fixed is None:
        self.fixed = False
      if self.time_known is None:
        self.time_known = False
      if self.derivative is None:
        self.derivative = 0
      if self.segment_index is None:
        self.segment_index = 0
      if self.time_stamp is None:
        self.time_stamp = 0.
      if self.quaternion_given is None:
        self.quaternion_given = False
    else:
      self.x = 0.
      self.y = 0.
      self.z = 0.
      self.vx = 0.
      self.vy = 0.
      self.vz = 0.
      self.roll = 0.
      self.pitch = 0.
      self.yaw = 0.
      self.roll_des = 0.
      self.pitch_des = 0.
      self.yaw_des = 0.
      self.roll_rate_des = 0.
      self.pitch_rate_des = 0.
      self.yaw_rate_des = 0.
      self.thrust_des = 0.
      self.input_given = False
      self.q = [0.] * 4
      self.cube_x = [0.] * 2
      self.cube_y = [0.] * 2
      self.cube_z = [0.] * 2
      self.cube_yaw = [0.] * 2
      self.fixed = False
      self.time_known = False
      self.derivative = 0
      self.segment_index = 0
      self.time_stamp = 0.
      self.quaternion_given = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_16dB().pack(_x.x, _x.y, _x.z, _x.vx, _x.vy, _x.vz, _x.roll, _x.pitch, _x.yaw, _x.roll_des, _x.pitch_des, _x.yaw_des, _x.roll_rate_des, _x.pitch_rate_des, _x.yaw_rate_des, _x.thrust_des, _x.input_given))
      buff.write(_get_struct_4d().pack(*self.q))
      buff.write(_get_struct_2d().pack(*self.cube_x))
      buff.write(_get_struct_2d().pack(*self.cube_y))
      buff.write(_get_struct_2d().pack(*self.cube_z))
      buff.write(_get_struct_2d().pack(*self.cube_yaw))
      _x = self
      buff.write(_get_struct_2B2bdB().pack(_x.fixed, _x.time_known, _x.derivative, _x.segment_index, _x.time_stamp, _x.quaternion_given))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 129
      (_x.x, _x.y, _x.z, _x.vx, _x.vy, _x.vz, _x.roll, _x.pitch, _x.yaw, _x.roll_des, _x.pitch_des, _x.yaw_des, _x.roll_rate_des, _x.pitch_rate_des, _x.yaw_rate_des, _x.thrust_des, _x.input_given,) = _get_struct_16dB().unpack(str[start:end])
      self.input_given = bool(self.input_given)
      start = end
      end += 32
      self.q = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 16
      self.cube_x = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 16
      self.cube_y = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 16
      self.cube_z = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 16
      self.cube_yaw = _get_struct_2d().unpack(str[start:end])
      _x = self
      start = end
      end += 13
      (_x.fixed, _x.time_known, _x.derivative, _x.segment_index, _x.time_stamp, _x.quaternion_given,) = _get_struct_2B2bdB().unpack(str[start:end])
      self.fixed = bool(self.fixed)
      self.time_known = bool(self.time_known)
      self.quaternion_given = bool(self.quaternion_given)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_16dB().pack(_x.x, _x.y, _x.z, _x.vx, _x.vy, _x.vz, _x.roll, _x.pitch, _x.yaw, _x.roll_des, _x.pitch_des, _x.yaw_des, _x.roll_rate_des, _x.pitch_rate_des, _x.yaw_rate_des, _x.thrust_des, _x.input_given))
      buff.write(self.q.tostring())
      buff.write(self.cube_x.tostring())
      buff.write(self.cube_y.tostring())
      buff.write(self.cube_z.tostring())
      buff.write(self.cube_yaw.tostring())
      _x = self
      buff.write(_get_struct_2B2bdB().pack(_x.fixed, _x.time_known, _x.derivative, _x.segment_index, _x.time_stamp, _x.quaternion_given))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 129
      (_x.x, _x.y, _x.z, _x.vx, _x.vy, _x.vz, _x.roll, _x.pitch, _x.yaw, _x.roll_des, _x.pitch_des, _x.yaw_des, _x.roll_rate_des, _x.pitch_rate_des, _x.yaw_rate_des, _x.thrust_des, _x.input_given,) = _get_struct_16dB().unpack(str[start:end])
      self.input_given = bool(self.input_given)
      start = end
      end += 32
      self.q = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
      start = end
      end += 16
      self.cube_x = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=2)
      start = end
      end += 16
      self.cube_y = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=2)
      start = end
      end += 16
      self.cube_z = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=2)
      start = end
      end += 16
      self.cube_yaw = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=2)
      _x = self
      start = end
      end += 13
      (_x.fixed, _x.time_known, _x.derivative, _x.segment_index, _x.time_stamp, _x.quaternion_given,) = _get_struct_2B2bdB().unpack(str[start:end])
      self.fixed = bool(self.fixed)
      self.time_known = bool(self.time_known)
      self.quaternion_given = bool(self.quaternion_given)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16dB = None
def _get_struct_16dB():
    global _struct_16dB
    if _struct_16dB is None:
        _struct_16dB = struct.Struct("<16dB")
    return _struct_16dB
_struct_2B2bdB = None
def _get_struct_2B2bdB():
    global _struct_2B2bdB
    if _struct_2B2bdB is None:
        _struct_2B2bdB = struct.Struct("<2B2bdB")
    return _struct_2B2bdB
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
