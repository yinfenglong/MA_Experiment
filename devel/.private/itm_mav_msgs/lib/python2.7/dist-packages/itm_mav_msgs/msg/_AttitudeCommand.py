# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from itm_mav_msgs/AttitudeCommand.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class AttitudeCommand(genpy.Message):
  _md5sum = "ba99a1fcefbbc4c8eb8328bcdd1d674c"
  _type = "itm_mav_msgs/AttitudeCommand"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# This represents an output of a UAV feedback controller (mrs_uav_manager::Controller).
# This message is returned from a controller by means of the update() function, called by the mrs_uav_manager::ControlManager.

# fork from CTU work

std_msgs/Header header

# The name of the controller (implementation-wise).
# Beware, multiple instances of the same controller can be running.
# The ControlManagerDiagnostics message contains the name given them
# by the ControlManager.
string controller

# True if the controller is in the initial rampup phase (just after activation).
bool ramping_up

# The desired orientation produced by the controller.
# This field should be filled every time.
geometry_msgs/Quaternion attitude

# The desired attitude rate produced by the controller.
# This field is optional.
geometry_msgs/Point attitude_rate

# Desired acceleration produced by the controller.
# This field is mandatory if flying with "mrs_odometry".
# The desired acceleration should be without calculate without
# compensation of external forces and disturbances, e.g., without
# the compensation for the gravity vector, wind and internal UAV biases.
geometry_msgs/Point desired_acceleration

# The desired thrust, [0, 1].
float64 thrust

# The estimated mass difference from the nominal mass.
float64 mass_difference

# Total estimated UAV mass.
float64 total_mass

# World-frame disturbances expressed in the world frame.
float64 disturbance_wx_w
float64 disturbance_wy_w

# Body-frame (fcu_untilted) disturbances expressed in the world frame.
float64 disturbance_bx_w
float64 disturbance_by_w

# Body-frame (fcu_untilted) disturbances expressed in the body frame (fcu_untilted).
float64 disturbance_bx_b
float64 disturbance_by_b

# The controller can enforce dynamics constraints over the trackers.
# This can be used when flying with a controller that is limited to
# some maximum speed and acceleration.
bool controller_enforcing_constraints
float64 horizontal_speed_constraint
float64 horizontal_acc_constraint
float64 vertical_asc_speed_constraint
float64 vertical_asc_acc_constraint
float64 vertical_desc_speed_constraint
float64 vertical_desc_acc_constraint

# Defines what output should be used, whether the attitude
# or the attitude rate.
uint8 mode_mask
uint8 MODE_ATTITUDE=1
uint8 MODE_ATTITUDE_RATE=2
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  # Pseudo-constants
  MODE_ATTITUDE = 1
  MODE_ATTITUDE_RATE = 2

  __slots__ = ['header','controller','ramping_up','attitude','attitude_rate','desired_acceleration','thrust','mass_difference','total_mass','disturbance_wx_w','disturbance_wy_w','disturbance_bx_w','disturbance_by_w','disturbance_bx_b','disturbance_by_b','controller_enforcing_constraints','horizontal_speed_constraint','horizontal_acc_constraint','vertical_asc_speed_constraint','vertical_asc_acc_constraint','vertical_desc_speed_constraint','vertical_desc_acc_constraint','mode_mask']
  _slot_types = ['std_msgs/Header','string','bool','geometry_msgs/Quaternion','geometry_msgs/Point','geometry_msgs/Point','float64','float64','float64','float64','float64','float64','float64','float64','float64','bool','float64','float64','float64','float64','float64','float64','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,controller,ramping_up,attitude,attitude_rate,desired_acceleration,thrust,mass_difference,total_mass,disturbance_wx_w,disturbance_wy_w,disturbance_bx_w,disturbance_by_w,disturbance_bx_b,disturbance_by_b,controller_enforcing_constraints,horizontal_speed_constraint,horizontal_acc_constraint,vertical_asc_speed_constraint,vertical_asc_acc_constraint,vertical_desc_speed_constraint,vertical_desc_acc_constraint,mode_mask

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AttitudeCommand, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.controller is None:
        self.controller = ''
      if self.ramping_up is None:
        self.ramping_up = False
      if self.attitude is None:
        self.attitude = geometry_msgs.msg.Quaternion()
      if self.attitude_rate is None:
        self.attitude_rate = geometry_msgs.msg.Point()
      if self.desired_acceleration is None:
        self.desired_acceleration = geometry_msgs.msg.Point()
      if self.thrust is None:
        self.thrust = 0.
      if self.mass_difference is None:
        self.mass_difference = 0.
      if self.total_mass is None:
        self.total_mass = 0.
      if self.disturbance_wx_w is None:
        self.disturbance_wx_w = 0.
      if self.disturbance_wy_w is None:
        self.disturbance_wy_w = 0.
      if self.disturbance_bx_w is None:
        self.disturbance_bx_w = 0.
      if self.disturbance_by_w is None:
        self.disturbance_by_w = 0.
      if self.disturbance_bx_b is None:
        self.disturbance_bx_b = 0.
      if self.disturbance_by_b is None:
        self.disturbance_by_b = 0.
      if self.controller_enforcing_constraints is None:
        self.controller_enforcing_constraints = False
      if self.horizontal_speed_constraint is None:
        self.horizontal_speed_constraint = 0.
      if self.horizontal_acc_constraint is None:
        self.horizontal_acc_constraint = 0.
      if self.vertical_asc_speed_constraint is None:
        self.vertical_asc_speed_constraint = 0.
      if self.vertical_asc_acc_constraint is None:
        self.vertical_asc_acc_constraint = 0.
      if self.vertical_desc_speed_constraint is None:
        self.vertical_desc_speed_constraint = 0.
      if self.vertical_desc_acc_constraint is None:
        self.vertical_desc_acc_constraint = 0.
      if self.mode_mask is None:
        self.mode_mask = 0
    else:
      self.header = std_msgs.msg.Header()
      self.controller = ''
      self.ramping_up = False
      self.attitude = geometry_msgs.msg.Quaternion()
      self.attitude_rate = geometry_msgs.msg.Point()
      self.desired_acceleration = geometry_msgs.msg.Point()
      self.thrust = 0.
      self.mass_difference = 0.
      self.total_mass = 0.
      self.disturbance_wx_w = 0.
      self.disturbance_wy_w = 0.
      self.disturbance_bx_w = 0.
      self.disturbance_by_w = 0.
      self.disturbance_bx_b = 0.
      self.disturbance_by_b = 0.
      self.controller_enforcing_constraints = False
      self.horizontal_speed_constraint = 0.
      self.horizontal_acc_constraint = 0.
      self.vertical_asc_speed_constraint = 0.
      self.vertical_asc_acc_constraint = 0.
      self.vertical_desc_speed_constraint = 0.
      self.vertical_desc_acc_constraint = 0.
      self.mode_mask = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.controller
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B19dB6dB().pack(_x.ramping_up, _x.attitude.x, _x.attitude.y, _x.attitude.z, _x.attitude.w, _x.attitude_rate.x, _x.attitude_rate.y, _x.attitude_rate.z, _x.desired_acceleration.x, _x.desired_acceleration.y, _x.desired_acceleration.z, _x.thrust, _x.mass_difference, _x.total_mass, _x.disturbance_wx_w, _x.disturbance_wy_w, _x.disturbance_bx_w, _x.disturbance_by_w, _x.disturbance_bx_b, _x.disturbance_by_b, _x.controller_enforcing_constraints, _x.horizontal_speed_constraint, _x.horizontal_acc_constraint, _x.vertical_asc_speed_constraint, _x.vertical_asc_acc_constraint, _x.vertical_desc_speed_constraint, _x.vertical_desc_acc_constraint, _x.mode_mask))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.attitude is None:
        self.attitude = geometry_msgs.msg.Quaternion()
      if self.attitude_rate is None:
        self.attitude_rate = geometry_msgs.msg.Point()
      if self.desired_acceleration is None:
        self.desired_acceleration = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.controller = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.controller = str[start:end]
      _x = self
      start = end
      end += 203
      (_x.ramping_up, _x.attitude.x, _x.attitude.y, _x.attitude.z, _x.attitude.w, _x.attitude_rate.x, _x.attitude_rate.y, _x.attitude_rate.z, _x.desired_acceleration.x, _x.desired_acceleration.y, _x.desired_acceleration.z, _x.thrust, _x.mass_difference, _x.total_mass, _x.disturbance_wx_w, _x.disturbance_wy_w, _x.disturbance_bx_w, _x.disturbance_by_w, _x.disturbance_bx_b, _x.disturbance_by_b, _x.controller_enforcing_constraints, _x.horizontal_speed_constraint, _x.horizontal_acc_constraint, _x.vertical_asc_speed_constraint, _x.vertical_asc_acc_constraint, _x.vertical_desc_speed_constraint, _x.vertical_desc_acc_constraint, _x.mode_mask,) = _get_struct_B19dB6dB().unpack(str[start:end])
      self.ramping_up = bool(self.ramping_up)
      self.controller_enforcing_constraints = bool(self.controller_enforcing_constraints)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.controller
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B19dB6dB().pack(_x.ramping_up, _x.attitude.x, _x.attitude.y, _x.attitude.z, _x.attitude.w, _x.attitude_rate.x, _x.attitude_rate.y, _x.attitude_rate.z, _x.desired_acceleration.x, _x.desired_acceleration.y, _x.desired_acceleration.z, _x.thrust, _x.mass_difference, _x.total_mass, _x.disturbance_wx_w, _x.disturbance_wy_w, _x.disturbance_bx_w, _x.disturbance_by_w, _x.disturbance_bx_b, _x.disturbance_by_b, _x.controller_enforcing_constraints, _x.horizontal_speed_constraint, _x.horizontal_acc_constraint, _x.vertical_asc_speed_constraint, _x.vertical_asc_acc_constraint, _x.vertical_desc_speed_constraint, _x.vertical_desc_acc_constraint, _x.mode_mask))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.attitude is None:
        self.attitude = geometry_msgs.msg.Quaternion()
      if self.attitude_rate is None:
        self.attitude_rate = geometry_msgs.msg.Point()
      if self.desired_acceleration is None:
        self.desired_acceleration = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.controller = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.controller = str[start:end]
      _x = self
      start = end
      end += 203
      (_x.ramping_up, _x.attitude.x, _x.attitude.y, _x.attitude.z, _x.attitude.w, _x.attitude_rate.x, _x.attitude_rate.y, _x.attitude_rate.z, _x.desired_acceleration.x, _x.desired_acceleration.y, _x.desired_acceleration.z, _x.thrust, _x.mass_difference, _x.total_mass, _x.disturbance_wx_w, _x.disturbance_wy_w, _x.disturbance_bx_w, _x.disturbance_by_w, _x.disturbance_bx_b, _x.disturbance_by_b, _x.controller_enforcing_constraints, _x.horizontal_speed_constraint, _x.horizontal_acc_constraint, _x.vertical_asc_speed_constraint, _x.vertical_asc_acc_constraint, _x.vertical_desc_speed_constraint, _x.vertical_desc_acc_constraint, _x.mode_mask,) = _get_struct_B19dB6dB().unpack(str[start:end])
      self.ramping_up = bool(self.ramping_up)
      self.controller_enforcing_constraints = bool(self.controller_enforcing_constraints)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B19dB6dB = None
def _get_struct_B19dB6dB():
    global _struct_B19dB6dB
    if _struct_B19dB6dB is None:
        _struct_B19dB6dB = struct.Struct("<B19dB6dB")
    return _struct_B19dB6dB
