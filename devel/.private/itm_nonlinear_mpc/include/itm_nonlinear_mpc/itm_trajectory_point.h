// Generated by gencpp from file itm_nonlinear_mpc/itm_trajectory_point.msg
// DO NOT EDIT!


#ifndef ITM_NONLINEAR_MPC_MESSAGE_ITM_TRAJECTORY_POINT_H
#define ITM_NONLINEAR_MPC_MESSAGE_ITM_TRAJECTORY_POINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace itm_nonlinear_mpc
{
template <class ContainerAllocator>
struct itm_trajectory_point_
{
  typedef itm_trajectory_point_<ContainerAllocator> Type;

  itm_trajectory_point_()
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , vx(0.0)
    , vy(0.0)
    , vz(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , q()
    , cube_x()
    , cube_y()
    , cube_z()
    , cube_yaw()
    , fixed(false)
    , time_known(false)
    , derivative(0)
    , segment_index(0)
    , time_stamp(0.0)
    , quaternion_given(false)  {
      q.assign(0.0);

      cube_x.assign(0.0);

      cube_y.assign(0.0);

      cube_z.assign(0.0);

      cube_yaw.assign(0.0);
  }
  itm_trajectory_point_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , vx(0.0)
    , vy(0.0)
    , vz(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , q()
    , cube_x()
    , cube_y()
    , cube_z()
    , cube_yaw()
    , fixed(false)
    , time_known(false)
    , derivative(0)
    , segment_index(0)
    , time_stamp(0.0)
    , quaternion_given(false)  {
  (void)_alloc;
      q.assign(0.0);

      cube_x.assign(0.0);

      cube_y.assign(0.0);

      cube_z.assign(0.0);

      cube_yaw.assign(0.0);
  }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef double _vx_type;
  _vx_type vx;

   typedef double _vy_type;
  _vy_type vy;

   typedef double _vz_type;
  _vz_type vz;

   typedef double _roll_type;
  _roll_type roll;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _yaw_type;
  _yaw_type yaw;

   typedef boost::array<double, 4>  _q_type;
  _q_type q;

   typedef boost::array<double, 2>  _cube_x_type;
  _cube_x_type cube_x;

   typedef boost::array<double, 2>  _cube_y_type;
  _cube_y_type cube_y;

   typedef boost::array<double, 2>  _cube_z_type;
  _cube_z_type cube_z;

   typedef boost::array<double, 2>  _cube_yaw_type;
  _cube_yaw_type cube_yaw;

   typedef uint8_t _fixed_type;
  _fixed_type fixed;

   typedef uint8_t _time_known_type;
  _time_known_type time_known;

   typedef int8_t _derivative_type;
  _derivative_type derivative;

   typedef int8_t _segment_index_type;
  _segment_index_type segment_index;

   typedef double _time_stamp_type;
  _time_stamp_type time_stamp;

   typedef uint8_t _quaternion_given_type;
  _quaternion_given_type quaternion_given;





  typedef boost::shared_ptr< ::itm_nonlinear_mpc::itm_trajectory_point_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::itm_nonlinear_mpc::itm_trajectory_point_<ContainerAllocator> const> ConstPtr;

}; // struct itm_trajectory_point_

typedef ::itm_nonlinear_mpc::itm_trajectory_point_<std::allocator<void> > itm_trajectory_point;

typedef boost::shared_ptr< ::itm_nonlinear_mpc::itm_trajectory_point > itm_trajectory_pointPtr;
typedef boost::shared_ptr< ::itm_nonlinear_mpc::itm_trajectory_point const> itm_trajectory_pointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::itm_nonlinear_mpc::itm_trajectory_point_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::itm_nonlinear_mpc::itm_trajectory_point_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::itm_nonlinear_mpc::itm_trajectory_point_<ContainerAllocator1> & lhs, const ::itm_nonlinear_mpc::itm_trajectory_point_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.vx == rhs.vx &&
    lhs.vy == rhs.vy &&
    lhs.vz == rhs.vz &&
    lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.yaw == rhs.yaw &&
    lhs.q == rhs.q &&
    lhs.cube_x == rhs.cube_x &&
    lhs.cube_y == rhs.cube_y &&
    lhs.cube_z == rhs.cube_z &&
    lhs.cube_yaw == rhs.cube_yaw &&
    lhs.fixed == rhs.fixed &&
    lhs.time_known == rhs.time_known &&
    lhs.derivative == rhs.derivative &&
    lhs.segment_index == rhs.segment_index &&
    lhs.time_stamp == rhs.time_stamp &&
    lhs.quaternion_given == rhs.quaternion_given;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::itm_nonlinear_mpc::itm_trajectory_point_<ContainerAllocator1> & lhs, const ::itm_nonlinear_mpc::itm_trajectory_point_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace itm_nonlinear_mpc

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::itm_nonlinear_mpc::itm_trajectory_point_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::itm_nonlinear_mpc::itm_trajectory_point_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::itm_nonlinear_mpc::itm_trajectory_point_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::itm_nonlinear_mpc::itm_trajectory_point_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::itm_nonlinear_mpc::itm_trajectory_point_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::itm_nonlinear_mpc::itm_trajectory_point_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::itm_nonlinear_mpc::itm_trajectory_point_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8bc93db1142dc497f7fb791295f3f567";
  }

  static const char* value(const ::itm_nonlinear_mpc::itm_trajectory_point_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8bc93db1142dc497ULL;
  static const uint64_t static_value2 = 0xf7fb791295f3f567ULL;
};

template<class ContainerAllocator>
struct DataType< ::itm_nonlinear_mpc::itm_trajectory_point_<ContainerAllocator> >
{
  static const char* value()
  {
    return "itm_nonlinear_mpc/itm_trajectory_point";
  }

  static const char* value(const ::itm_nonlinear_mpc::itm_trajectory_point_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::itm_nonlinear_mpc::itm_trajectory_point_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 vx\n"
"float64 vy\n"
"float64 vz\n"
"float64 roll\n"
"float64 pitch\n"
"float64 yaw\n"
"float64[4] q\n"
"float64[2] cube_x\n"
"float64[2] cube_y\n"
"float64[2] cube_z\n"
"float64[2] cube_yaw\n"
"bool fixed\n"
"bool time_known\n"
"int8 derivative\n"
"int8 segment_index\n"
"float64 time_stamp\n"
"bool quaternion_given\n"
;
  }

  static const char* value(const ::itm_nonlinear_mpc::itm_trajectory_point_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::itm_nonlinear_mpc::itm_trajectory_point_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.vx);
      stream.next(m.vy);
      stream.next(m.vz);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
      stream.next(m.q);
      stream.next(m.cube_x);
      stream.next(m.cube_y);
      stream.next(m.cube_z);
      stream.next(m.cube_yaw);
      stream.next(m.fixed);
      stream.next(m.time_known);
      stream.next(m.derivative);
      stream.next(m.segment_index);
      stream.next(m.time_stamp);
      stream.next(m.quaternion_given);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct itm_trajectory_point_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::itm_nonlinear_mpc::itm_trajectory_point_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::itm_nonlinear_mpc::itm_trajectory_point_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "vx: ";
    Printer<double>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<double>::stream(s, indent + "  ", v.vy);
    s << indent << "vz: ";
    Printer<double>::stream(s, indent + "  ", v.vz);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    s << indent << "q[]" << std::endl;
    for (size_t i = 0; i < v.q.size(); ++i)
    {
      s << indent << "  q[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.q[i]);
    }
    s << indent << "cube_x[]" << std::endl;
    for (size_t i = 0; i < v.cube_x.size(); ++i)
    {
      s << indent << "  cube_x[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.cube_x[i]);
    }
    s << indent << "cube_y[]" << std::endl;
    for (size_t i = 0; i < v.cube_y.size(); ++i)
    {
      s << indent << "  cube_y[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.cube_y[i]);
    }
    s << indent << "cube_z[]" << std::endl;
    for (size_t i = 0; i < v.cube_z.size(); ++i)
    {
      s << indent << "  cube_z[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.cube_z[i]);
    }
    s << indent << "cube_yaw[]" << std::endl;
    for (size_t i = 0; i < v.cube_yaw.size(); ++i)
    {
      s << indent << "  cube_yaw[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.cube_yaw[i]);
    }
    s << indent << "fixed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fixed);
    s << indent << "time_known: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.time_known);
    s << indent << "derivative: ";
    Printer<int8_t>::stream(s, indent + "  ", v.derivative);
    s << indent << "segment_index: ";
    Printer<int8_t>::stream(s, indent + "  ", v.segment_index);
    s << indent << "time_stamp: ";
    Printer<double>::stream(s, indent + "  ", v.time_stamp);
    s << indent << "quaternion_given: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.quaternion_given);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ITM_NONLINEAR_MPC_MESSAGE_ITM_TRAJECTORY_POINT_H
