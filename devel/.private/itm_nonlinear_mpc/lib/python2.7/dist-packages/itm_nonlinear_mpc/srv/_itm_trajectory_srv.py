# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from itm_nonlinear_mpc/itm_trajectory_srvRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import itm_nonlinear_mpc.msg

class itm_trajectory_srvRequest(genpy.Message):
  _md5sum = "8041461697ac94a6fda5d3cf87ef5f2f"
  _type = "itm_nonlinear_mpc/itm_trajectory_srvRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 index
itm_nonlinear_mpc/itm_trajectory_point[] traj

================================================================================
MSG: itm_nonlinear_mpc/itm_trajectory_point
float64 x
float64 y
float64 z
float64 vx
float64 vy
float64 vz
float64 roll
float64 pitch
float64 yaw
float64[4] q
float64[2] cube_x
float64[2] cube_y
float64[2] cube_z
float64[2] cube_yaw
bool fixed
bool time_known
int8 derivative
int8 segment_index
float64 time_stamp
bool quaternion_given
"""
  __slots__ = ['index','traj']
  _slot_types = ['uint32','itm_nonlinear_mpc/itm_trajectory_point[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       index,traj

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(itm_trajectory_srvRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.index is None:
        self.index = 0
      if self.traj is None:
        self.traj = []
    else:
      self.index = 0
      self.traj = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.index
      buff.write(_get_struct_I().pack(_x))
      length = len(self.traj)
      buff.write(_struct_I.pack(length))
      for val1 in self.traj:
        _x = val1
        buff.write(_get_struct_9d().pack(_x.x, _x.y, _x.z, _x.vx, _x.vy, _x.vz, _x.roll, _x.pitch, _x.yaw))
        buff.write(_get_struct_4d().pack(*val1.q))
        buff.write(_get_struct_2d().pack(*val1.cube_x))
        buff.write(_get_struct_2d().pack(*val1.cube_y))
        buff.write(_get_struct_2d().pack(*val1.cube_z))
        buff.write(_get_struct_2d().pack(*val1.cube_yaw))
        _x = val1
        buff.write(_get_struct_2B2bdB().pack(_x.fixed, _x.time_known, _x.derivative, _x.segment_index, _x.time_stamp, _x.quaternion_given))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.traj is None:
        self.traj = None
      end = 0
      start = end
      end += 4
      (self.index,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.traj = []
      for i in range(0, length):
        val1 = itm_nonlinear_mpc.msg.itm_trajectory_point()
        _x = val1
        start = end
        end += 72
        (_x.x, _x.y, _x.z, _x.vx, _x.vy, _x.vz, _x.roll, _x.pitch, _x.yaw,) = _get_struct_9d().unpack(str[start:end])
        start = end
        end += 32
        val1.q = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 16
        val1.cube_x = _get_struct_2d().unpack(str[start:end])
        start = end
        end += 16
        val1.cube_y = _get_struct_2d().unpack(str[start:end])
        start = end
        end += 16
        val1.cube_z = _get_struct_2d().unpack(str[start:end])
        start = end
        end += 16
        val1.cube_yaw = _get_struct_2d().unpack(str[start:end])
        _x = val1
        start = end
        end += 13
        (_x.fixed, _x.time_known, _x.derivative, _x.segment_index, _x.time_stamp, _x.quaternion_given,) = _get_struct_2B2bdB().unpack(str[start:end])
        val1.fixed = bool(val1.fixed)
        val1.time_known = bool(val1.time_known)
        val1.quaternion_given = bool(val1.quaternion_given)
        self.traj.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.index
      buff.write(_get_struct_I().pack(_x))
      length = len(self.traj)
      buff.write(_struct_I.pack(length))
      for val1 in self.traj:
        _x = val1
        buff.write(_get_struct_9d().pack(_x.x, _x.y, _x.z, _x.vx, _x.vy, _x.vz, _x.roll, _x.pitch, _x.yaw))
        buff.write(val1.q.tostring())
        buff.write(val1.cube_x.tostring())
        buff.write(val1.cube_y.tostring())
        buff.write(val1.cube_z.tostring())
        buff.write(val1.cube_yaw.tostring())
        _x = val1
        buff.write(_get_struct_2B2bdB().pack(_x.fixed, _x.time_known, _x.derivative, _x.segment_index, _x.time_stamp, _x.quaternion_given))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.traj is None:
        self.traj = None
      end = 0
      start = end
      end += 4
      (self.index,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.traj = []
      for i in range(0, length):
        val1 = itm_nonlinear_mpc.msg.itm_trajectory_point()
        _x = val1
        start = end
        end += 72
        (_x.x, _x.y, _x.z, _x.vx, _x.vy, _x.vz, _x.roll, _x.pitch, _x.yaw,) = _get_struct_9d().unpack(str[start:end])
        start = end
        end += 32
        val1.q = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
        start = end
        end += 16
        val1.cube_x = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=2)
        start = end
        end += 16
        val1.cube_y = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=2)
        start = end
        end += 16
        val1.cube_z = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=2)
        start = end
        end += 16
        val1.cube_yaw = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=2)
        _x = val1
        start = end
        end += 13
        (_x.fixed, _x.time_known, _x.derivative, _x.segment_index, _x.time_stamp, _x.quaternion_given,) = _get_struct_2B2bdB().unpack(str[start:end])
        val1.fixed = bool(val1.fixed)
        val1.time_known = bool(val1.time_known)
        val1.quaternion_given = bool(val1.quaternion_given)
        self.traj.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B2bdB = None
def _get_struct_2B2bdB():
    global _struct_2B2bdB
    if _struct_2B2bdB is None:
        _struct_2B2bdB = struct.Struct("<2B2bdB")
    return _struct_2B2bdB
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from itm_nonlinear_mpc/itm_trajectory_srvResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class itm_trajectory_srvResponse(genpy.Message):
  _md5sum = "358e233cde0c8a8bcfea4ce193f8fc15"
  _type = "itm_nonlinear_mpc/itm_trajectory_srvResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool success
"""
  __slots__ = ['success']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(itm_trajectory_srvResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
    else:
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class itm_trajectory_srv(object):
  _type          = 'itm_nonlinear_mpc/itm_trajectory_srv'
  _md5sum = '26ff1de4ce8cbafd1f9f9a97392ec44f'
  _request_class  = itm_trajectory_srvRequest
  _response_class = itm_trajectory_srvResponse
