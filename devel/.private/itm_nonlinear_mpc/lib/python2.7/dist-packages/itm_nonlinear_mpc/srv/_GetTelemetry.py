# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from itm_nonlinear_mpc/GetTelemetryRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetTelemetryRequest(genpy.Message):
  _md5sum = "371cb926969bb965addb80f752c7ca31"
  _type = "itm_nonlinear_mpc/GetTelemetryRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string frame_id
"""
  __slots__ = ['frame_id']
  _slot_types = ['string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       frame_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetTelemetryRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.frame_id is None:
        self.frame_id = ''
    else:
      self.frame_id = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.frame_id = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.frame_id = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from itm_nonlinear_mpc/GetTelemetryResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetTelemetryResponse(genpy.Message):
  _md5sum = "34b7c5985f35b7ea8dc5f87c88ce6c93"
  _type = "itm_nonlinear_mpc/GetTelemetryResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string frame_id
bool connected
bool armed
string mode
float32 x
float32 y
float32 z
float64 lat
float64 lon
float32 alt
float32 vx
float32 vy
float32 vz
float32 pitch
float32 roll
float32 yaw
float32 pitch_rate
float32 roll_rate
float32 yaw_rate
float32 voltage
float32 cell_voltage

"""
  __slots__ = ['frame_id','connected','armed','mode','x','y','z','lat','lon','alt','vx','vy','vz','pitch','roll','yaw','pitch_rate','roll_rate','yaw_rate','voltage','cell_voltage']
  _slot_types = ['string','bool','bool','string','float32','float32','float32','float64','float64','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       frame_id,connected,armed,mode,x,y,z,lat,lon,alt,vx,vy,vz,pitch,roll,yaw,pitch_rate,roll_rate,yaw_rate,voltage,cell_voltage

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetTelemetryResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.frame_id is None:
        self.frame_id = ''
      if self.connected is None:
        self.connected = False
      if self.armed is None:
        self.armed = False
      if self.mode is None:
        self.mode = ''
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.z is None:
        self.z = 0.
      if self.lat is None:
        self.lat = 0.
      if self.lon is None:
        self.lon = 0.
      if self.alt is None:
        self.alt = 0.
      if self.vx is None:
        self.vx = 0.
      if self.vy is None:
        self.vy = 0.
      if self.vz is None:
        self.vz = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.roll is None:
        self.roll = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.pitch_rate is None:
        self.pitch_rate = 0.
      if self.roll_rate is None:
        self.roll_rate = 0.
      if self.yaw_rate is None:
        self.yaw_rate = 0.
      if self.voltage is None:
        self.voltage = 0.
      if self.cell_voltage is None:
        self.cell_voltage = 0.
    else:
      self.frame_id = ''
      self.connected = False
      self.armed = False
      self.mode = ''
      self.x = 0.
      self.y = 0.
      self.z = 0.
      self.lat = 0.
      self.lon = 0.
      self.alt = 0.
      self.vx = 0.
      self.vy = 0.
      self.vz = 0.
      self.pitch = 0.
      self.roll = 0.
      self.yaw = 0.
      self.pitch_rate = 0.
      self.roll_rate = 0.
      self.yaw_rate = 0.
      self.voltage = 0.
      self.cell_voltage = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B().pack(_x.connected, _x.armed))
      _x = self.mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3f2d12f().pack(_x.x, _x.y, _x.z, _x.lat, _x.lon, _x.alt, _x.vx, _x.vy, _x.vz, _x.pitch, _x.roll, _x.yaw, _x.pitch_rate, _x.roll_rate, _x.yaw_rate, _x.voltage, _x.cell_voltage))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.frame_id = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.connected, _x.armed,) = _get_struct_2B().unpack(str[start:end])
      self.connected = bool(self.connected)
      self.armed = bool(self.armed)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.mode = str[start:end]
      _x = self
      start = end
      end += 76
      (_x.x, _x.y, _x.z, _x.lat, _x.lon, _x.alt, _x.vx, _x.vy, _x.vz, _x.pitch, _x.roll, _x.yaw, _x.pitch_rate, _x.roll_rate, _x.yaw_rate, _x.voltage, _x.cell_voltage,) = _get_struct_3f2d12f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B().pack(_x.connected, _x.armed))
      _x = self.mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3f2d12f().pack(_x.x, _x.y, _x.z, _x.lat, _x.lon, _x.alt, _x.vx, _x.vy, _x.vz, _x.pitch, _x.roll, _x.yaw, _x.pitch_rate, _x.roll_rate, _x.yaw_rate, _x.voltage, _x.cell_voltage))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.frame_id = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.connected, _x.armed,) = _get_struct_2B().unpack(str[start:end])
      self.connected = bool(self.connected)
      self.armed = bool(self.armed)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.mode = str[start:end]
      _x = self
      start = end
      end += 76
      (_x.x, _x.y, _x.z, _x.lat, _x.lon, _x.alt, _x.vx, _x.vy, _x.vz, _x.pitch, _x.roll, _x.yaw, _x.pitch_rate, _x.roll_rate, _x.yaw_rate, _x.voltage, _x.cell_voltage,) = _get_struct_3f2d12f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_3f2d12f = None
def _get_struct_3f2d12f():
    global _struct_3f2d12f
    if _struct_3f2d12f is None:
        _struct_3f2d12f = struct.Struct("<3f2d12f")
    return _struct_3f2d12f
class GetTelemetry(object):
  _type          = 'itm_nonlinear_mpc/GetTelemetry'
  _md5sum = '3f1c3a9f95e1194fe8ebc671ce98ef91'
  _request_class  = GetTelemetryRequest
  _response_class = GetTelemetryResponse
